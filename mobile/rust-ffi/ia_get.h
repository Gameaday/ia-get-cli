/* ia-get FFI C Header - Generated by cbindgen */

/* Generated with cbindgen:0.29.0 */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

/**
 * Timeout for all HTTP requests in seconds
 */
#define HTTP_TIMEOUT 60

/**
 * Maximum concurrent connections per host (Internet Archive recommendation)
 */
#define MAX_CONCURRENT_CONNECTIONS 5

/**
 * Minimum delay between requests to same server (milliseconds)
 */
#define MIN_REQUEST_DELAY_MS 100

/**
 * Default retry delay for transient errors (seconds)
 */
#define DEFAULT_RETRY_DELAY_SECS 30

/**
 * Maximum retry delay cap (seconds) - 10 minutes is reasonable for large downloads
 */
#define MAX_RETRY_DELAY_SECS 600

/**
 * Spinner tick interval in milliseconds
 */
#define SPINNER_TICK_INTERVAL 100

/**
 * FFI-compatible error codes
 */
typedef enum IaGetErrorCode {
    Success = 0,
    InvalidInput = 1,
    NetworkError = 2,
    FileSystemError = 3,
    ParseError = 4,
    UnknownError = 5,
} IaGetErrorCode;

/**
 * Progress update callback function type
 */
typedef struct ProgressCallback ProgressCallback;

/**
 * Callback function type for completion
 */
typedef void (*CompletionCallback)(bool success, const char *error_message, uintptr_t user_data);

/**
 * FFI-compatible download configuration
 */
typedef struct FfiDownloadConfig {
    uint32_t concurrent_downloads;
    uint64_t max_file_size;
    const char *output_directory;
    const char *include_formats;
    const char *exclude_formats;
    bool dry_run;
    bool verbose;
    bool auto_decompress;
    bool resume_downloads;
    bool verify_checksums;
} FfiDownloadConfig;

/**
 * FFI-compatible download progress information
 */
typedef struct FfiDownloadProgress {
    int32_t session_id;
    double overall_progress;
    const char *current_file;
    double current_file_progress;
    uint64_t download_speed;
    uint64_t eta_seconds;
    uint32_t completed_files;
    uint32_t total_files;
    uint64_t downloaded_bytes;
    uint64_t total_bytes;
} FfiDownloadProgress;

/**
 * FFI-compatible file information
 */
typedef struct FfiFileInfo {
    const char *name;
    uint64_t size;
    const char *format;
    const char *download_url;
    const char *md5;
    const char *sha1;
    bool selected;
} FfiFileInfo;

/**
 * FFI-compatible archive metadata
 */
typedef struct FfiArchiveMetadata {
    const char *identifier;
    const char *title;
    const char *description;
    const char *creator;
    const char *date;
    uint32_t total_files;
    uint64_t total_size;
    const struct FfiFileInfo *files;
    uint32_t files_count;
} FfiArchiveMetadata;

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * Initialize the FFI interface
 * Must be called once before using any other functions
 */
enum IaGetErrorCode ia_get_init(void);

/**
 * Cleanup the FFI interface
 * Should be called when the application is shutting down
 */
void ia_get_cleanup(void);

/**
 * Fetch archive metadata asynchronously
 * Returns a session ID that can be used to cancel the operation
 *
 * # Safety
 * The `identifier` parameter must be a valid null-terminated C string pointer.
 * The caller must ensure the string remains valid for the duration of the call.
 */
int ia_get_fetch_metadata(const char *identifier,
                          ProgressCallback progress_callback,
                          CompletionCallback completion_callback,
                          uintptr_t user_data);

/**
 * Get cached metadata as JSON string
 * Returns null if metadata not found
 *
 * # Safety
 * The `identifier` parameter must be a valid null-terminated C string pointer.
 * The returned pointer must be freed using `ia_get_free_string`.
 */
char *ia_get_get_metadata_json(const char *identifier);

/**
 * Create a new download session
 * Returns session ID for tracking
 *
 * # Safety
 * Both `identifier` and `config` must be valid pointers.
 * The `identifier` must be a valid null-terminated C string.
 * The `config` must point to a valid `FfiDownloadConfig` structure.
 */
int ia_get_create_session(const char *identifier, const struct FfiDownloadConfig *config);

/**
 * Filter files based on criteria
 * Returns JSON string with filtered file list
 *
 * # Safety
 * The `metadata_json` parameter must be a valid null-terminated C string pointer.
 * The optional parameters (`include_formats`, `exclude_formats`, `max_size_str`) can be null
 * or must be valid null-terminated C string pointers.
 * The returned pointer must be freed using `ia_get_free_string`.
 */
char *ia_get_filter_files(const char *metadata_json,
                          const char *include_formats,
                          const char *exclude_formats,
                          const char *max_size_str);

/**
 * Start a download session
 * Returns 0 on success, error code on failure
 * Start downloading selected files
 *
 * # Safety
 * The `files_json` parameter must be a valid null-terminated C string pointer
 * containing valid JSON data.
 */
enum IaGetErrorCode ia_get_start_download(int session_id,
                                          const char *files_json,
                                          ProgressCallback progress_callback,
                                          CompletionCallback completion_callback,
                                          uintptr_t user_data);

/**
 * Get download progress for a session
 * Get current download progress for a session
 *
 * # Safety
 * The `progress` parameter must be a valid pointer to an allocated `FfiDownloadProgress` structure.
 */
enum IaGetErrorCode ia_get_get_download_progress(int session_id,
                                                 struct FfiDownloadProgress *progress);

/**
 * Pause a download session
 */
enum IaGetErrorCode ia_get_pause_download(int session_id);

/**
 * Resume a download session
 */
enum IaGetErrorCode ia_get_resume_download(int session_id);

/**
 * Cancel a download session
 */
enum IaGetErrorCode ia_get_cancel_download(int session_id);

/**
 * Cancel an ongoing operation
 */
enum IaGetErrorCode ia_get_cancel_operation(int operation_id);

/**
 * Get session information as JSON
 */
char *ia_get_get_session_info(int session_id);

/**
 * Get available download formats for an archive
 *
 * # Safety
 * The `identifier` parameter must be a valid null-terminated C string pointer.
 * The returned pointer must be freed using `ia_get_free_string`.
 */
char *ia_get_get_available_formats(const char *identifier);

/**
 * Calculate total size of selected files
 *
 * # Safety
 * The `files_json` parameter must be a valid null-terminated C string pointer
 * containing valid JSON data.
 */
uint64_t ia_get_calculate_total_size(const char *files_json);

/**
 * Validate download URL accessibility
 *
 * # Safety
 * The `files_json` parameter must be a valid null-terminated C string pointer
 * containing valid JSON data.
 */
int ia_get_validate_urls(const char *files_json,
                         ProgressCallback progress_callback,
                         CompletionCallback completion_callback,
                         uintptr_t user_data);

/**
 * Free memory allocated by FFI functions
 *
 * # Safety
 * The `ptr` parameter must be a valid pointer previously returned by an FFI function
 * that allocates memory, or null. Calling this function with an invalid pointer
 * or calling it more than once with the same pointer will cause undefined behavior.
 */
void ia_get_free_string(char *ptr);

/**
 * Get the last error message (thread-local)
 */
const char *ia_get_last_error(void);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus
