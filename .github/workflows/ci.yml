name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Cancel previous runs when new commits are pushed to the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test and Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/Cargo.toml') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-
          ${{ runner.os }}-cargo-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy (CLI only)
      run: cargo clippy --no-default-features --features cli --all-targets -- -D warnings

    - name: Build CLI (fast build)
      run: cargo build --no-default-features --features cli --release

    - name: Build GUI (full build)
      run: cargo build --features gui --release

    - name: Run tests (CLI only - faster)
      run: cargo test --no-default-features --features cli

    - name: Create artifact
      shell: bash
      run: |
        mkdir -p artifacts
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          cp target/release/ia-get.exe artifacts/
          cd artifacts && 7z a ia-get-${{ runner.os }}.zip ia-get.exe
        else
          cp target/release/ia-get artifacts/
          cd artifacts && tar czf ia-get-${{ runner.os }}.tar.gz ia-get
        fi

    - name: Calculate and display SHA256 hashes
      shell: bash
      run: |
        cd artifacts
        echo "# Calculated SHA256 hashes:" > ../hashes_${{ runner.os }}.txt
        for file in *; do
          if [ -f "$file" ]; then
            hash=$(sha256sum "$file" | cut -d' ' -f1)
            echo "SHA256 for $file: $hash"
            echo "$hash  $file" >> ../hashes_${{ runner.os }}.txt
          fi
        done

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ia-get-${{ runner.os }}
        path: |
          artifacts/*
          hashes_${{ runner.os }}.txt
        retention-days: 30

  release:
    name: Create Development Release
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-artifacts

    - name: Prepare release artifacts
      run: |
        mkdir -p final-artifacts
        # Flatten artifact directory structure and gather hash information
        find release-artifacts -type f -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" final-artifacts/
        done
        # Copy binaries
        find release-artifacts -type f -name "ia-get" -o -name "ia-get.exe" | while read file; do
          cp "$file" final-artifacts/
        done
        
        cd final-artifacts
        echo "## ðŸ“¦ Artifact Checksums (SHA256)" > ../HASHES.md
        echo "" >> ../HASHES.md
        
        # Collect hashes from all hash files
        for hash_file in ../release-artifacts/*/hashes_*.txt; do
          if [ -f "$hash_file" ]; then
            # Read each line from the hash file and match with files in final-artifacts
            while IFS= read -r line; do
              if [[ "$line" =~ ^[a-f0-9]{64}[[:space:]]+(.+)$ ]]; then
                hash=$(echo "$line" | cut -d' ' -f1)
                filename=$(echo "$line" | cut -d' ' -f3-)
                if [ -f "$filename" ]; then
                  echo "- **${filename}**: \`${hash}\`" >> ../HASHES.md
                fi
              fi
            done < "$hash_file"
          fi
        done

    - name: Generate release notes
      run: |
        COMMIT_SHA=$(git rev-parse --short HEAD)
        COMMIT_MSG=$(git log -1 --pretty=format:'%s')
        DATE=$(date '+%Y-%m-%d %H:%M:%S UTC')
        
        cat > RELEASE_NOTES.md << EOF
        # ðŸš€ Development Build - ${COMMIT_SHA}
        
        **Build Date**: ${DATE}  
        **Commit**: ${COMMIT_SHA}  
        **Message**: ${COMMIT_MSG}
        
        ## ðŸ“¥ Downloads
        
        Choose your platform:
        - **Linux**: \`ia-get-Linux.tar.gz\`
        - **Windows**: \`ia-get-Windows.zip\` 
        - **macOS**: \`ia-get-macOS.tar.gz\`
        
        $(cat HASHES.md)
        
        ## ðŸ“‹ Recent Changes
        
        $(head -n 50 CHANGELOG.md | tail -n +3)
        
        ---
        *This is an automated development build. For stable releases, see [tagged releases](https://github.com/Gameaday/ia-get-cli/releases).*
        EOF

    - name: Delete previous development release
      continue-on-error: true
      run: |
        gh release delete development --yes || true
        git push origin :refs/tags/development || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create development release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: development
        name: "ðŸ”§ Latest Development Build"
        body_path: RELEASE_NOTES.md
        files: final-artifacts/*
        prerelease: true
        make_latest: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}