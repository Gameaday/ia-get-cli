name: Build 🏗️ and Publish 📦️

# This workflow builds release artifacts for all platforms using independent implementations:
# - Rust CLI: Terminal-first with search and batch operations (default)
# - Rust GUI: Optional graphical interface (--features gui)
# - Flutter Mobile: Pure Dart implementation (no native dependencies)

# Cancel previous runs when new tags are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Optimize Cargo for release builds
  CARGO_TERM_COLOR: always
  CARGO_NET_RETRY: 10
  CARGO_NET_TIMEOUT: 60
  CARGO_HTTP_TIMEOUT: 60
  CARGO_HTTP_LOW_SPEED_LIMIT: 10
  # Prefer cached dependencies when available
  CARGO_NET_OFFLINE: false
  # Enable incremental compilation for faster builds
  CARGO_INCREMENTAL: 1

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  flutter-mobile-release:
    name: Flutter Mobile App Release Build (Pure Dart)
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'
    # This job builds production Flutter mobile app using PURE DART implementation
    # No FFI, no native dependencies, no Rust compilation required

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.0'
          channel: 'stable'
          cache: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-flutter-release-dart3.8-${{ hashFiles('mobile/flutter/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-flutter-release-dart3.8-

      - name: Verify Flutter and Dart versions
        run: |
          flutter --version
          flutter doctor -v

      - name: Build Android APK and App Bundle (Pure Dart)
        run: |
          chmod +x scripts/build-mobile.sh
          
          # Build production App Bundle for Play Store - Pure Dart!
          ./scripts/build-mobile.sh --production --appbundle --store-ready
          
          # Also build production APK for direct distribution
          ./scripts/build-mobile.sh --production --store-ready

      - name: Package Flutter release artifacts
        shell: bash
        env:
          PROJECT_NAME: flutter-mobile
          PACKAGE_NAME: flutter-mobile
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          mkdir -p flutter-release-artifacts
          
          # Track what we package
          FOUND_ITEMS=0
          
          # Copy App Bundle and APK files from Flutter build output
          if [ -d "mobile/flutter/build/app/outputs" ]; then
            echo "✓ Found Flutter build outputs"
            
            # Copy App Bundle files - check multiple possible locations
            AAB_FOUND=false
            AAB_SEARCH_PATHS=(
              "mobile/flutter/build/app/outputs/bundle/*/*.aab"
              "mobile/flutter/build/app/outputs/bundle/*/*/*.aab"
            )
            
            for search_path in "${AAB_SEARCH_PATHS[@]}"; do
              if ls $search_path 1> /dev/null 2>&1; then
                echo "✓ Found AAB files at: $search_path"
                cp $search_path flutter-release-artifacts/ 2>/dev/null || true
                AAB_FOUND=true
              fi
            done
            
            if [ "$AAB_FOUND" = true ]; then
              AAB_COUNT=$(find flutter-release-artifacts/ -name "*.aab" | wc -l)
              echo "✓ Copied $AAB_COUNT App Bundle file(s)"
              FOUND_ITEMS=$((FOUND_ITEMS + AAB_COUNT))
            fi
            
            # Copy APK files - check multiple possible locations
            APK_FOUND=false
            APK_SEARCH_PATHS=(
              "mobile/flutter/build/app/outputs/flutter-apk/*.apk"
              "mobile/flutter/build/app/outputs/apk/*/release/*.apk"
              "mobile/flutter/build/app/outputs/apk/*/*.apk"
            )
            
            for search_path in "${APK_SEARCH_PATHS[@]}"; do
              if ls $search_path 1> /dev/null 2>&1; then
                echo "✓ Found APK files at: $search_path"
                cp $search_path flutter-release-artifacts/ 2>/dev/null || true
                APK_FOUND=true
              fi
            done
            
            if [ "$APK_FOUND" = true ]; then
              APK_COUNT=$(find flutter-release-artifacts/ -name "*.apk" | wc -l)
              echo "✓ Copied $APK_COUNT APK file(s)"
              FOUND_ITEMS=$((FOUND_ITEMS + APK_COUNT))
            fi
          else
            echo "❌ ERROR: Flutter build outputs not found!"
            echo "Searched for: mobile/flutter/build/app/outputs"
            exit 1
          fi
          
          # Note: NO native libraries - Pure Dart!
          echo "ℹ️  Pure Dart implementation - no native libraries needed"
          
          # Copy documentation
          cp README.md LICENSE flutter-release-artifacts/ || true
          
          # Validate content
          if [ $FOUND_ITEMS -eq 0 ]; then
            echo "❌ ERROR: No Flutter release artifacts found!"
            echo "Searched APK paths:"
            for search_path in "${APK_SEARCH_PATHS[@]}"; do
              echo "  - $search_path"
            done
            echo "Searched AAB paths:"
            for search_path in "${AAB_SEARCH_PATHS[@]}"; do
              echo "  - $search_path"
            done
            echo ""
            echo "Actual build outputs:"
            find mobile/flutter/build/app/outputs -type f \( -name "*.apk" -o -name "*.aab" \) 2>/dev/null || echo "No APK or AAB files found"
            exit 1
          fi
          
          echo "📦 Flutter release artifacts summary:"
          ls -la flutter-release-artifacts/
          echo "Total artifacts found: $FOUND_ITEMS"
          echo "Implementation: Pure Dart (no native dependencies)"
          
          # Create Play Store submission package
          if ls flutter-release-artifacts/*.aab 1> /dev/null 2>&1; then
            mkdir -p flutter-release-artifacts/play-store
            cp flutter-release-artifacts/*.aab flutter-release-artifacts/play-store/
            echo "# Google Play Store Submission Package" > flutter-release-artifacts/play-store/README.md
            echo "" >> flutter-release-artifacts/play-store/README.md
            echo "This App Bundle (.aab) is ready for submission to Google Play Store." >> flutter-release-artifacts/play-store/README.md
            echo "Pure Dart implementation - no native dependencies." >> flutter-release-artifacts/play-store/README.md
            echo "✓ Created Play Store submission package"
          fi
          
          # Create versioned archive
          cd flutter-release-artifacts
          zip -9 -r "../${PACKAGE_NAME}-${TAG_NAME}.zip" *
          cd ..
          
          # Validate and calculate hashes
          ARCHIVE_SIZE=$(stat -c%s "${PACKAGE_NAME}-${TAG_NAME}.zip" 2>/dev/null || stat -f%z "${PACKAGE_NAME}-${TAG_NAME}.zip" 2>/dev/null || echo "0")
          ARCHIVE_SIZE_KB=$((ARCHIVE_SIZE / 1024))
          echo "📏 Archive size: ${ARCHIVE_SIZE_KB}KB"
          
          sha256sum "${PACKAGE_NAME}-${TAG_NAME}.zip" > "FLUTTER_HASHES_${TAG_NAME}.txt"
          
          # Add individual file hashes
          if ls flutter-release-artifacts/*.aab 1> /dev/null 2>&1; then
            echo "" >> "FLUTTER_HASHES_${TAG_NAME}.txt"
            echo "# Individual File Hashes" >> "FLUTTER_HASHES_${TAG_NAME}.txt"
            sha256sum flutter-release-artifacts/*.aab >> "FLUTTER_HASHES_${TAG_NAME}.txt"
          fi
          if ls flutter-release-artifacts/*.apk 1> /dev/null 2>&1; then
            sha256sum flutter-release-artifacts/*.apk >> "FLUTTER_HASHES_${TAG_NAME}.txt"
          fi
          
          echo "✓ Flutter release artifact created: ${PACKAGE_NAME}-${TAG_NAME}.zip (${ARCHIVE_SIZE_KB}KB)"

      - name: Upload Flutter release artifacts
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            flutter-mobile-*.zip
            FLUTTER_HASHES_*.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publishing for ${{ matrix.job.os }} (${{ matrix.job.target }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-latest
            target: x86_64-apple-darwin
            use-cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
            use-cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Installing Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
      - name: Checkout repository
        uses: actions/checkout@v5
      - name: Install cross
        if: matrix.job.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - name: Cargo build
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.7
        shell: bash
        run: |
          # Build with CLI as default - terminal-first approach with search and batch operations
          # GUI is available via --features gui
          if [[ "${{ matrix.job.use-cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.job.target }}
          else
            cargo build --release --target ${{ matrix.job.target }}
          fi

      - name: Install required dependencies
        shell: bash
        run: |
          if [[ ${{ matrix.job.target }} == arm-unknown-linux-gnueabihf ]]; then
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y update
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y install binutils-arm-linux-gnueabihf
          fi
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y update
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y install binutils-aarch64-linux-gnu
          fi

      - name: Sign Windows executable
        if: matrix.job.target == 'x86_64-pc-windows-msvc' && matrix.job.os == 'windows-latest'
        uses: azure/trusted-signing@v3
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_TRUSTED_SIGNING_ENDPOINT }}
          code-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_ACCOUNT_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE_NAME }}
          files-folder: ${{ github.workspace }}/target/${{ matrix.job.target }}/release
          files-folder-filter: exe
          files-folder-recurse: false
          files-folder-depth: 1
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Verify Windows code signature
        if: matrix.job.target == 'x86_64-pc-windows-msvc' && matrix.job.os == 'windows-latest'
        shell: powershell
        run: |
          $exePath = "target/${{ matrix.job.target }}/release/ia-get.exe"
          if (Test-Path $exePath) {
            Write-Host "Verifying code signature for: $exePath"
            $signature = Get-AuthenticodeSignature -FilePath $exePath
            Write-Host "Signature Status: $($signature.Status)"
            Write-Host "Certificate Subject: $($signature.SignerCertificate.Subject)"
            Write-Host "Certificate Thumbprint: $($signature.SignerCertificate.Thumbprint)"
            Write-Host "Timestamp: $($signature.TimeStamperCertificate.NotAfter)"
            
            if ($signature.Status -eq "Valid") {
              Write-Host "✅ Code signature verification successful"
            } else {
              Write-Host "❌ Code signature verification failed: $($signature.Status)"
              Write-Host "Status Message: $($signature.StatusMessage)"
              exit 1
            }
          } else {
            Write-Host "❌ Executable not found at: $exePath"
            exit 1
          }

      - name: Packaging final binary
        shell: bash
        env:
          TARGET: ${{ matrix.job.target }}
          PROJECT_NAME: ia-get
          PACKAGE_NAME: ia-get
          OS_NAME: ${{ matrix.job.os }}
        run: |
          # Use the build script for packaging (it will run automatically on release builds)
          # Just ensure artifacts are created and calculate hashes
          mkdir -p artifacts
          
          # Handle Windows vs Unix binary names
          if [[ "$OS_NAME" == "windows-latest" ]]; then
            BINARY_NAME="${PROJECT_NAME}.exe"
          else
            BINARY_NAME="$PROJECT_NAME"
          fi
          
          if [ -f "target/${{ matrix.job.target }}/release/$BINARY_NAME" ]; then
            cp "target/${{ matrix.job.target }}/release/$BINARY_NAME" "artifacts/"
          elif [ -f "target/release/$BINARY_NAME" ]; then
            cp "target/release/$BINARY_NAME" "artifacts/"
          else
            echo "Binary not found in expected location"
            echo "Looking for: target/${{ matrix.job.target }}/release/$BINARY_NAME"
            echo "Alternative: target/release/$BINARY_NAME"
            ls -la target/${{ matrix.job.target }}/release/ || true
            ls -la target/release/ || true
            exit 1
          fi

          # Copy documentation
          [ -f README.md ] && cp README.md artifacts/ || echo "README.md not found"
          [ -f LICENSE ] && cp LICENSE artifacts/ || echo "LICENSE not found"

          # Create archive
          cd artifacts
          if [[ "$OS_NAME" == "windows-latest" ]]; then
            7z a "${PACKAGE_NAME}-${GITHUB_REF/refs\/tags\//}-${TARGET}.zip" * || zip -r "${PACKAGE_NAME}-${GITHUB_REF/refs\/tags\//}-${TARGET}.zip" *
          else
            zip -r "${PACKAGE_NAME}-${GITHUB_REF/refs\/tags\//}-${TARGET}.zip" *
          fi

          # Calculate hashes
          for file in *; do
            if [ -f "$file" ]; then
              hash=$(sha256sum "$file" | cut -d' ' -f1)
              echo "$hash  $file" >> ../RELEASE_HASHES.txt
            fi
          done

      - name: Generate release notes with hashes
        shell: bash
        run: |
          echo "## 📦 Artifact Checksums (SHA256)" > HASHES_${{ matrix.job.target }}.md
          echo "" >> HASHES_${{ matrix.job.target }}.md
          if [ -f "RELEASE_HASHES.txt" ]; then
            while IFS= read -r line; do
              if [[ "$line" =~ ^[a-f0-9]{64}[[:space:]]+(.+)$ ]]; then
                hash=$(echo "$line" | cut -d' ' -f1)
                filename=$(echo "$line" | cut -d' ' -f3-)
                echo "- **${filename}**: \`${hash}\`" >> HASHES_${{ matrix.job.target }}.md
              fi
            done < RELEASE_HASHES.txt
          else
            echo "- Hash information will be available shortly" >> HASHES_${{ matrix.job.target }}.md
          fi

      - name: Releasing assets
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            ia-get-*-${{ matrix.job.target }}.*
            ia-get*.deb
            RELEASE_HASHES.txt
            HASHES_${{ matrix.job.target }}.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_release_notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [publish, flutter-mobile-release]
    if: github.ref_type == 'tag'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download release assets to collect hashes
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Get all release hash files and combine them
          gh release view $TAG_NAME --json assets --jq '.assets[] | select(.name | test("RELEASE_HASHES.txt|HASHES_.*\\.md")) | .downloadUrl' | while read url; do
            if [[ "$url" == *"RELEASE_HASHES.txt"* ]]; then
              curl -sL "$url" >> ALL_HASHES.txt
            fi
          done || true
          
          # Generate comprehensive release notes
          cat > FINAL_RELEASE_NOTES.md << 'EOF'
          # 🚀 Release ${TAG_NAME}
          
          ## 📥 Downloads
          
          ### 🖥️ Desktop (Rust CLI - Terminal First)
          Terminal-optimized implementation with search and batch operations:
          - **Linux (x86_64)**: [ia-get-${TAG_NAME}-x86_64-unknown-linux-gnu.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-x86_64-unknown-linux-gnu.zip)
          - **Windows (x86_64)**: [ia-get-${TAG_NAME}-x86_64-pc-windows-msvc.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-x86_64-pc-windows-msvc.zip)
          - **macOS (x86_64)**: [ia-get-${TAG_NAME}-x86_64-apple-darwin.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-x86_64-apple-darwin.zip)
          - **macOS (ARM64)**: [ia-get-${TAG_NAME}-aarch64-apple-darwin.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-aarch64-apple-darwin.zip)
          
          ### 📱 Mobile (Flutter - Pure Dart)
          - **Android**: [flutter-mobile-${TAG_NAME}.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/flutter-mobile-${TAG_NAME}.zip)
          
          ### All Platforms
          See the **Assets** section below for all supported platforms including Linux ARM, musl variants, and .deb packages.
          
          ### 📱 Flutter Mobile Features
          - **Pure Dart Implementation**: No native dependencies or FFI complexity
          - **Easy Platform Extension**: Ready for iOS, Web, and Desktop
          - **Production APK**: Install directly on Android devices
          - **App Bundle (AAB)**: Submit to Google Play Store
          - **Standard Flutter Build**: Simple `flutter build apk` workflow
          
          ## 🔐 Integrity Verification
          
          All artifacts include SHA256 checksums for integrity verification:
          
          \`\`\`
          $([ -f ALL_HASHES.txt ] && cat ALL_HASHES.txt || echo "Checksums will be available shortly...")
          \`\`\`
          
          **Usage**: Download the RELEASE_HASHES.txt file and run \`sha256sum -c RELEASE_HASHES.txt\`
          
          ## 📋 Changelog
          
          $(head -n 100 CHANGELOG.md | tail -n +3)
          
          ---
          
          For development builds and latest changes, see the [development release](https://github.com/Gameaday/ia-get-cli/releases/tag/development).
          EOF

      - name: Update release with comprehensive notes
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          gh release edit $TAG_NAME --notes-file FINAL_RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
