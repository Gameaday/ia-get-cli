name: Build 🏗️ and Publish 📦️

# Cancel previous runs when new tags are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Optimize Cargo for release builds
  CARGO_TERM_COLOR: always
  CARGO_NET_RETRY: 10
  CARGO_NET_TIMEOUT: 60
  CARGO_HTTP_TIMEOUT: 60
  CARGO_HTTP_LOW_SPEED_LIMIT: 10
  # Prefer cached dependencies when available
  CARGO_NET_OFFLINE: false
  # Enable incremental compilation for faster builds
  CARGO_INCREMENTAL: 1

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  publish:
    name: Publishing for ${{ matrix.job.os }} (${{ matrix.job.target }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-latest
            target: x86_64-apple-darwin
            use-cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
            use-cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Installing Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
          
      - name: Cache Rust toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: ${{ runner.os }}-${{ matrix.job.target }}-rustup-stable-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-rustup-stable-
            ${{ runner.os }}-${{ matrix.job.target }}-rustup-
            ${{ runner.os }}-rustup-stable-

      - name: Cache Cargo registry and dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            # Windows-specific paths
            ${{ runner.os == 'Windows' && 'C:\Users\runneradmin\.cargo\registry\' || '' }}
            ${{ runner.os == 'Windows' && 'C:\Users\runneradmin\.cargo\git\' || '' }}
          key: ${{ runner.os }}-${{ matrix.job.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-cargo-registry-
            ${{ runner.os }}-cargo-registry-

      - name: Cache target directory for cross-compilation
        uses: actions/cache@v4
        with:
          path: |
            target/${{ matrix.job.target }}/release/deps/
            target/${{ matrix.job.target }}/release/build/
            target/${{ matrix.job.target }}/release/.fingerprint/
            target/release/deps/
            target/release/build/
            target/release/.fingerprint/
          key: ${{ runner.os }}-${{ matrix.job.target }}-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src/**/*.rs') }}-${{ hashFiles('build.rs') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src/**/*.rs') }}-
            ${{ runner.os }}-${{ matrix.job.target }}-target-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-${{ matrix.job.target }}-target-
            ${{ runner.os }}-target-

      - name: Cache cross-compilation tools
        if: matrix.job.use-cross
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/cross
            ~/.cache/cross
          key: ${{ runner.os }}-${{ matrix.job.target }}-cross-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-cross-
            ${{ runner.os }}-cross-
            
      - name: Warm up dependency cache
        run: |
          # Pre-fetch dependencies for the target platform
          cargo fetch --verbose
          # Verify dependencies are available offline
          echo "Dependencies cached successfully"

      - name: Install cross
        if: matrix.job.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - name: Cargo build
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.7
        shell: bash
        run: |
          if [[ "${{ matrix.job.use-cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.job.target }}
          else
            cargo build --release --target ${{ matrix.job.target }}
          fi

      - name: Install required dependencies
        shell: bash
        run: |
          if [[ ${{ matrix.job.target }} == arm-unknown-linux-gnueabihf ]]; then
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y update
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y install binutils-arm-linux-gnueabihf
          fi
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y update
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y install binutils-aarch64-linux-gnu
          fi

      - name: Packaging final binary
        shell: bash
        env:
          TARGET: ${{ matrix.job.target }}
          PROJECT_NAME: ia-get
          PACKAGE_NAME: ia-get
          OS_NAME: ${{ matrix.job.os }}
        run: |
          # Use the build script for packaging (it will run automatically on release builds)
          # Just ensure artifacts are created and calculate hashes
          mkdir -p artifacts
          if [ -f "target/${{ matrix.job.target }}/release/$PROJECT_NAME" ]; then
            cp "target/${{ matrix.job.target }}/release/$PROJECT_NAME" "artifacts/"
          elif [ -f "target/release/$PROJECT_NAME" ]; then
            cp "target/release/$PROJECT_NAME" "artifacts/"
          else
            echo "Binary not found in expected location"
          fi

          # Copy documentation
          [ -f README.md ] && cp README.md artifacts/ || echo "README.md not found"
          [ -f LICENSE ] && cp LICENSE artifacts/ || echo "LICENSE not found"

          # Create archive
          cd artifacts
          if [[ "$OS_NAME" == "windows-latest" ]]; then
            7z a "${PACKAGE_NAME}-${GITHUB_REF/refs\/tags\//}-${TARGET}.zip" * || zip -r "${PACKAGE_NAME}-${GITHUB_REF/refs\/tags\//}-${TARGET}.zip" *
          else
            tar czf "${PACKAGE_NAME}-${GITHUB_REF/refs\/tags\//}-${TARGET}.tar.gz" *
          fi

          # Calculate hashes
          for file in *; do
            if [ -f "$file" ]; then
              hash=$(sha256sum "$file" | cut -d' ' -f1)
              echo "$hash  $file" >> ../RELEASE_HASHES.txt
            fi
          done

      - name: Generate release notes with hashes
        shell: bash
        run: |
          echo "## 📦 Artifact Checksums (SHA256)" > HASHES_${{ matrix.job.target }}.md
          echo "" >> HASHES_${{ matrix.job.target }}.md
          if [ -f "RELEASE_HASHES.txt" ]; then
            while IFS= read -r line; do
              if [[ "$line" =~ ^[a-f0-9]{64}[[:space:]]+(.+)$ ]]; then
                hash=$(echo "$line" | cut -d' ' -f1)
                filename=$(echo "$line" | cut -d' ' -f3-)
                echo "- **${filename}**: \`${hash}\`" >> HASHES_${{ matrix.job.target }}.md
              fi
            done < RELEASE_HASHES.txt
          else
            echo "- Hash information will be available shortly" >> HASHES_${{ matrix.job.target }}.md
          fi

      - name: Releasing assets
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            ia-get-*-${{ matrix.job.target }}.*
            ia-get*.deb
            RELEASE_HASHES.txt
            HASHES_${{ matrix.job.target }}.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_release_notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: publish
    if: github.ref_type == 'tag'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download release assets to collect hashes
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Get all release hash files and combine them
          gh release view $TAG_NAME --json assets --jq '.assets[] | select(.name | test("RELEASE_HASHES.txt|HASHES_.*\\.md")) | .downloadUrl' | while read url; do
            if [[ "$url" == *"RELEASE_HASHES.txt"* ]]; then
              curl -sL "$url" >> ALL_HASHES.txt
            fi
          done || true
          
          # Generate comprehensive release notes
          cat > FINAL_RELEASE_NOTES.md << 'EOF'
          # 🚀 Release ${TAG_NAME}
          
          ## 📥 Downloads
          
          ### Quick Downloads
          - **Linux (x86_64)**: [ia-get-${TAG_NAME}-x86_64-unknown-linux-gnu.tar.gz](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-x86_64-unknown-linux-gnu.tar.gz)
          - **Windows (x86_64)**: [ia-get-${TAG_NAME}-x86_64-pc-windows-msvc.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-x86_64-pc-windows-msvc.zip)
          - **macOS (x86_64)**: [ia-get-${TAG_NAME}-x86_64-apple-darwin.tar.gz](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-x86_64-apple-darwin.tar.gz)
          - **macOS (ARM64)**: [ia-get-${TAG_NAME}-aarch64-apple-darwin.tar.gz](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-aarch64-apple-darwin.tar.gz)
          
          ### All Platforms
          See the **Assets** section below for all supported platforms including Linux ARM, musl variants, and .deb packages.
          
          ## 🔐 Integrity Verification
          
          All artifacts include SHA256 checksums for integrity verification:
          
          \`\`\`
          $([ -f ALL_HASHES.txt ] && cat ALL_HASHES.txt || echo "Checksums will be available shortly...")
          \`\`\`
          
          **Usage**: Download the RELEASE_HASHES.txt file and run \`sha256sum -c RELEASE_HASHES.txt\`
          
          ## 📋 Changelog
          
          $(head -n 100 CHANGELOG.md | tail -n +3)
          
          ---
          
          For development builds and latest changes, see the [development release](https://github.com/Gameaday/ia-get-cli/releases/tag/development).
          EOF

      - name: Update release with comprehensive notes
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          gh release edit $TAG_NAME --notes-file FINAL_RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
