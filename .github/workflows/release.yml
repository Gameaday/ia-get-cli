name: Build 🏗️ and Publish 📦️

# Cancel previous runs when new tags are pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Optimize Cargo for release builds
  CARGO_TERM_COLOR: always
  CARGO_NET_RETRY: 10
  CARGO_NET_TIMEOUT: 60
  CARGO_HTTP_TIMEOUT: 60
  CARGO_HTTP_LOW_SPEED_LIMIT: 10
  # Prefer cached dependencies when available
  CARGO_NET_OFFLINE: false
  # Enable incremental compilation for faster builds
  CARGO_INCREMENTAL: 1

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+'

jobs:
  android-release:
    name: Android APK Release Build
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.0'
          channel: 'stable'
          cache: true

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,x86_64-linux-android,i686-linux-android

      - name: Install cargo-ndk
        run: cargo install cargo-ndk

      - name: Cache Android dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target/
            ~/.android
            ~/.pub-cache
          key: ${{ runner.os }}-android-release-dart3.8-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('mobile/**/Cargo.toml') }}-${{ hashFiles('mobile/**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-android-release-dart3.8-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('mobile/**/Cargo.toml') }}-
            ${{ runner.os }}-android-release-dart3.8-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-android-release-dart3.8-

      - name: Verify Flutter and Dart versions
        run: |
          flutter --version
          flutter doctor -v
          echo "Verifying Dart SDK version is 3.8.0 or higher..."
          DART_VERSION=$(flutter --version | grep "Dart" | awk '{print $4}')
          echo "Detected Dart version: $DART_VERSION"

      - name: Build Android APK and App Bundle
        run: |
          chmod +x scripts/build-mobile.sh
          
          # Build production App Bundle for Play Store
          ./scripts/build-mobile.sh --production --appbundle --store-ready
          
          # Also build production APK for direct distribution (as requested in issue)
          ./scripts/build-mobile.sh --production --store-ready

      - name: Package Android artifacts
        shell: bash
        env:
          PROJECT_NAME: ia-get
          PACKAGE_NAME: ia-get-android
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          mkdir -p android-release-artifacts
          
          # Track what we actually package
          FOUND_ITEMS=0
          
          # Copy App Bundle and APK files with validation
          if [ -d "target/mobile" ]; then
            echo "✓ Found target/mobile directory"
            ls -la target/mobile/
            
            # Copy App Bundle files
            if ls target/mobile/*.aab 1> /dev/null 2>&1; then
              cp target/mobile/*.aab android-release-artifacts/
              AAB_COUNT=$(ls target/mobile/*.aab | wc -l)
              echo "✓ Copied $AAB_COUNT App Bundle file(s)"
              FOUND_ITEMS=$((FOUND_ITEMS + AAB_COUNT))
            else
              echo "⚠ No App Bundle (.aab) files found"
            fi
            
            # Copy APK files  
            if ls target/mobile/*.apk 1> /dev/null 2>&1; then
              cp target/mobile/*.apk android-release-artifacts/
              APK_COUNT=$(ls target/mobile/*.apk | wc -l)
              echo "✓ Copied $APK_COUNT APK file(s)"
              FOUND_ITEMS=$((FOUND_ITEMS + APK_COUNT))
            else
              echo "⚠ No APK files found"
            fi
            
            # Copy split APKs if they exist
            if [ -d "target/mobile/apk-variants-production" ]; then
              mkdir -p android-release-artifacts/split-apks
              if ls target/mobile/apk-variants-production/* 1> /dev/null 2>&1; then
                cp target/mobile/apk-variants-production/* android-release-artifacts/split-apks/
                SPLIT_COUNT=$(ls target/mobile/apk-variants-production/* | wc -l)
                echo "✓ Copied $SPLIT_COUNT split APK file(s)"
                FOUND_ITEMS=$((FOUND_ITEMS + SPLIT_COUNT))
              fi
            fi
          else
            echo "❌ ERROR: target/mobile directory not found!"
            echo "Build may have failed. Check build logs above."
            exit 1
          fi
          
          # Copy native libraries for developers
          if [ -d "target/mobile/android" ]; then
            cp -r target/mobile/android android-release-artifacts/native-libs
            echo "✓ Copied native libraries"
            FOUND_ITEMS=$((FOUND_ITEMS + 1))
          else
            echo "⚠ No native libraries found at target/mobile/android"
          fi
          
          # Copy documentation and metadata
          cp README.md LICENSE android-release-artifacts/ || true
          
          # Validate we have meaningful content
          if [ $FOUND_ITEMS -eq 0 ]; then
            echo "❌ ERROR: No Android release artifacts were found!"
            echo "Expected to find APK/AAB files in target/mobile/"
            exit 1
          fi
          
          echo "📦 Android release artifacts summary:"
          ls -la android-release-artifacts/
          echo "Total artifacts found: $FOUND_ITEMS"
          
          # Create store submission package for App Bundle
          if [ -f "android-release-artifacts/ia-get-mobile-production.aab" ]; then
            mkdir -p android-release-artifacts/play-store
            cp android-release-artifacts/ia-get-mobile-production.aab android-release-artifacts/play-store/
            echo "# Google Play Store Submission Package" > android-release-artifacts/play-store/README.md
            echo "" >> android-release-artifacts/play-store/README.md
            echo "This App Bundle (.aab) is ready for submission to Google Play Store." >> android-release-artifacts/play-store/README.md
            echo "Upload this file to Google Play Console for distribution." >> android-release-artifacts/play-store/README.md
            echo "✓ Created Play Store submission package"
          fi
          
          # Create versioned archive
          cd android-release-artifacts
          zip -r "../${PACKAGE_NAME}-${TAG_NAME}.zip" *
          cd ..
          
          # Validate archive size
          ARCHIVE_SIZE=$(stat -c%s "${PACKAGE_NAME}-${TAG_NAME}.zip" 2>/dev/null || stat -f%z "${PACKAGE_NAME}-${TAG_NAME}.zip" 2>/dev/null || echo "0")
          ARCHIVE_SIZE_KB=$((ARCHIVE_SIZE / 1024))
          echo "📏 Archive size: ${ARCHIVE_SIZE_KB}KB"
          
          if [ $ARCHIVE_SIZE -lt 100000 ]; then  # Less than 100KB for production seems too small
            echo "⚠ WARNING: Production archive seems small (${ARCHIVE_SIZE_KB}KB)"
          fi
          
          # Calculate hashes
          sha256sum "${PACKAGE_NAME}-${TAG_NAME}.zip" > "ANDROID_HASHES_${TAG_NAME}.txt"
          
          # Add individual file hashes for important files
          if [ -f "android-release-artifacts/ia-get-mobile-production.aab" ]; then
            echo "" >> "ANDROID_HASHES_${TAG_NAME}.txt"
            echo "# Individual File Hashes" >> "ANDROID_HASHES_${TAG_NAME}.txt"
            sha256sum android-release-artifacts/ia-get-mobile-production.aab >> "ANDROID_HASHES_${TAG_NAME}.txt"
          fi
          if [ -f "android-release-artifacts/ia-get-mobile-production.apk" ]; then
            sha256sum android-release-artifacts/ia-get-mobile-production.apk >> "ANDROID_HASHES_${TAG_NAME}.txt"
          fi
          
          echo "✓ Android release artifact created: ${PACKAGE_NAME}-${TAG_NAME}.zip (${ARCHIVE_SIZE_KB}KB)"
          echo "Contents:"
          unzip -l "${PACKAGE_NAME}-${TAG_NAME}.zip" | head -20

      - name: Upload Android release artifacts
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            ia-get-android-*.zip
            ANDROID_HASHES_*.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    name: Publishing for ${{ matrix.job.os }} (${{ matrix.job.target }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - os: macos-latest
            target: x86_64-apple-darwin
            use-cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use-cross: false
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            use-cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use-cross: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use-cross: true
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
            use-cross: true
          - os: ubuntu-latest
            target: arm-unknown-linux-gnueabihf
            use-cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use-cross: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Installing Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.job.target }}
          
      - name: Cache Rust toolchain
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.rustup/toolchains
            ~/.rustup/update-hashes
            ~/.rustup/settings.toml
          key: ${{ runner.os }}-${{ matrix.job.target }}-rustup-stable-${{ hashFiles('Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-rustup-stable-
            ${{ runner.os }}-${{ matrix.job.target }}-rustup-
            ${{ runner.os }}-rustup-stable-

      - name: Cache Cargo registry and dependencies
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            # Windows-specific paths
            ${{ runner.os == 'Windows' && 'C:\Users\runneradmin\.cargo\registry\' || '' }}
            ${{ runner.os == 'Windows' && 'C:\Users\runneradmin\.cargo\git\' || '' }}
          key: ${{ runner.os }}-${{ matrix.job.target }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-cargo-registry-
            ${{ runner.os }}-cargo-registry-

      - name: Cache target directory for cross-compilation
        uses: actions/cache@v4.2.4
        with:
          path: |
            target/${{ matrix.job.target }}/release/deps/
            target/${{ matrix.job.target }}/release/build/
            target/${{ matrix.job.target }}/release/.fingerprint/
            target/release/deps/
            target/release/build/
            target/release/.fingerprint/
          key: ${{ runner.os }}-${{ matrix.job.target }}-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src/**/*.rs') }}-${{ hashFiles('build.rs') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('src/**/*.rs') }}-
            ${{ runner.os }}-${{ matrix.job.target }}-target-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-${{ matrix.job.target }}-target-
            ${{ runner.os }}-target-

      - name: Cache cross-compilation tools
        if: matrix.job.use-cross
        uses: actions/cache@v4.2.4
        with:
          path: |
            ~/.cargo/bin/cross
            ~/.cache/cross
          key: ${{ runner.os }}-${{ matrix.job.target }}-cross-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.job.target }}-cross-
            ${{ runner.os }}-cross-
            
      - name: Warm up dependency cache
        run: |
          # Pre-fetch dependencies for the target platform
          cargo fetch --verbose
          # Verify dependencies are available offline
          echo "Dependencies cached successfully"

      - name: Install cross
        if: matrix.job.use-cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      - name: Cargo build
        env:
          MACOSX_DEPLOYMENT_TARGET: 10.7
        shell: bash
        run: |
          if [[ "${{ matrix.job.use-cross }}" == "true" ]]; then
            cross build --release --target ${{ matrix.job.target }}
          else
            cargo build --release --target ${{ matrix.job.target }}
          fi

      - name: Install required dependencies
        shell: bash
        run: |
          if [[ ${{ matrix.job.target }} == arm-unknown-linux-gnueabihf ]]; then
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y update
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y install binutils-arm-linux-gnueabihf
          fi
          if [[ ${{ matrix.job.target }} == aarch64-unknown-linux-gnu ]]; then
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y update
            DEBIAN_FRONTEND=noninteractive sudo apt-get -y install binutils-aarch64-linux-gnu
          fi

      - name: Sign Windows executable
        if: matrix.job.target == 'x86_64-pc-windows-msvc' && matrix.job.os == 'windows-latest'
        uses: azure/trusted-signing@v3
        with:
          azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
          azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
          endpoint: ${{ secrets.AZURE_TRUSTED_SIGNING_ENDPOINT }}
          code-signing-account-name: ${{ secrets.AZURE_CODE_SIGNING_ACCOUNT_NAME }}
          certificate-profile-name: ${{ secrets.AZURE_CERTIFICATE_PROFILE_NAME }}
          files-folder: ${{ github.workspace }}/target/${{ matrix.job.target }}/release
          files-folder-filter: exe
          files-folder-recurse: false
          files-folder-depth: 1
          file-digest: SHA256
          timestamp-rfc3161: http://timestamp.acs.microsoft.com
          timestamp-digest: SHA256

      - name: Verify Windows code signature
        if: matrix.job.target == 'x86_64-pc-windows-msvc' && matrix.job.os == 'windows-latest'
        shell: powershell
        run: |
          $exePath = "target/${{ matrix.job.target }}/release/ia-get.exe"
          if (Test-Path $exePath) {
            Write-Host "Verifying code signature for: $exePath"
            $signature = Get-AuthenticodeSignature -FilePath $exePath
            Write-Host "Signature Status: $($signature.Status)"
            Write-Host "Certificate Subject: $($signature.SignerCertificate.Subject)"
            Write-Host "Certificate Thumbprint: $($signature.SignerCertificate.Thumbprint)"
            Write-Host "Timestamp: $($signature.TimeStamperCertificate.NotAfter)"
            
            if ($signature.Status -eq "Valid") {
              Write-Host "✅ Code signature verification successful"
            } else {
              Write-Host "❌ Code signature verification failed: $($signature.Status)"
              Write-Host "Status Message: $($signature.StatusMessage)"
              exit 1
            }
          } else {
            Write-Host "❌ Executable not found at: $exePath"
            exit 1
          }

      - name: Packaging final binary
        shell: bash
        env:
          TARGET: ${{ matrix.job.target }}
          PROJECT_NAME: ia-get
          PACKAGE_NAME: ia-get
          OS_NAME: ${{ matrix.job.os }}
        run: |
          # Use the build script for packaging (it will run automatically on release builds)
          # Just ensure artifacts are created and calculate hashes
          mkdir -p artifacts
          
          # Handle Windows vs Unix binary names
          if [[ "$OS_NAME" == "windows-latest" ]]; then
            BINARY_NAME="${PROJECT_NAME}.exe"
          else
            BINARY_NAME="$PROJECT_NAME"
          fi
          
          if [ -f "target/${{ matrix.job.target }}/release/$BINARY_NAME" ]; then
            cp "target/${{ matrix.job.target }}/release/$BINARY_NAME" "artifacts/"
          elif [ -f "target/release/$BINARY_NAME" ]; then
            cp "target/release/$BINARY_NAME" "artifacts/"
          else
            echo "Binary not found in expected location"
            echo "Looking for: target/${{ matrix.job.target }}/release/$BINARY_NAME"
            echo "Alternative: target/release/$BINARY_NAME"
            ls -la target/${{ matrix.job.target }}/release/ || true
            ls -la target/release/ || true
            exit 1
          fi

          # Copy documentation
          [ -f README.md ] && cp README.md artifacts/ || echo "README.md not found"
          [ -f LICENSE ] && cp LICENSE artifacts/ || echo "LICENSE not found"

          # Create archive
          cd artifacts
          if [[ "$OS_NAME" == "windows-latest" ]]; then
            7z a "${PACKAGE_NAME}-${GITHUB_REF/refs\/tags\//}-${TARGET}.zip" * || zip -r "${PACKAGE_NAME}-${GITHUB_REF/refs\/tags\//}-${TARGET}.zip" *
          else
            zip -r "${PACKAGE_NAME}-${GITHUB_REF/refs\/tags\//}-${TARGET}.zip" *
          fi

          # Calculate hashes
          for file in *; do
            if [ -f "$file" ]; then
              hash=$(sha256sum "$file" | cut -d' ' -f1)
              echo "$hash  $file" >> ../RELEASE_HASHES.txt
            fi
          done

      - name: Generate release notes with hashes
        shell: bash
        run: |
          echo "## 📦 Artifact Checksums (SHA256)" > HASHES_${{ matrix.job.target }}.md
          echo "" >> HASHES_${{ matrix.job.target }}.md
          if [ -f "RELEASE_HASHES.txt" ]; then
            while IFS= read -r line; do
              if [[ "$line" =~ ^[a-f0-9]{64}[[:space:]]+(.+)$ ]]; then
                hash=$(echo "$line" | cut -d' ' -f1)
                filename=$(echo "$line" | cut -d' ' -f3-)
                echo "- **${filename}**: \`${hash}\`" >> HASHES_${{ matrix.job.target }}.md
              fi
            done < RELEASE_HASHES.txt
          else
            echo "- Hash information will be available shortly" >> HASHES_${{ matrix.job.target }}.md
          fi

      - name: Releasing assets
        uses: softprops/action-gh-release@v2
        if: github.ref_type == 'tag'
        with:
          files: |
            ia-get-*-${{ matrix.job.target }}.*
            ia-get*.deb
            RELEASE_HASHES.txt
            HASHES_${{ matrix.job.target }}.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update_release_notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [publish, android-release]
    if: github.ref_type == 'tag'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download release assets to collect hashes
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          
          # Get all release hash files and combine them
          gh release view $TAG_NAME --json assets --jq '.assets[] | select(.name | test("RELEASE_HASHES.txt|HASHES_.*\\.md")) | .downloadUrl' | while read url; do
            if [[ "$url" == *"RELEASE_HASHES.txt"* ]]; then
              curl -sL "$url" >> ALL_HASHES.txt
            fi
          done || true
          
          # Generate comprehensive release notes
          cat > FINAL_RELEASE_NOTES.md << 'EOF'
          # 🚀 Release ${TAG_NAME}
          
          ## 📥 Downloads
          
          ### Quick Downloads
          - **Linux (x86_64)**: [ia-get-${TAG_NAME}-x86_64-unknown-linux-gnu.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-x86_64-unknown-linux-gnu.zip)
          - **Windows (x86_64)**: [ia-get-${TAG_NAME}-x86_64-pc-windows-msvc.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-x86_64-pc-windows-msvc.zip)
          - **macOS (x86_64)**: [ia-get-${TAG_NAME}-x86_64-apple-darwin.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-x86_64-apple-darwin.zip)
          - **macOS (ARM64)**: [ia-get-${TAG_NAME}-aarch64-apple-darwin.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-${TAG_NAME}-aarch64-apple-darwin.zip)
          - **🤖 Android**: [ia-get-android-${TAG_NAME}.zip](https://github.com/Gameaday/ia-get-cli/releases/download/${TAG_NAME}/ia-get-android-${TAG_NAME}.zip)
          
          ### All Platforms
          See the **Assets** section below for all supported platforms including Linux ARM, musl variants, .deb packages, and Android native libraries.
          
          ### 📱 Android Integration
          The Android package contains native libraries for:
          - ARM64 (arm64-v8a) - Modern 64-bit ARM devices
          - ARMv7 (armeabi-v7a) - Older 32-bit ARM devices  
          - x86_64 - Intel/AMD 64-bit emulators
          - x86 - Intel/AMD 32-bit emulators
          
          Perfect for embedding into Android apps or for use with FFI frameworks like Flutter.
          
          ## 🔐 Integrity Verification
          
          All artifacts include SHA256 checksums for integrity verification:
          
          \`\`\`
          $([ -f ALL_HASHES.txt ] && cat ALL_HASHES.txt || echo "Checksums will be available shortly...")
          \`\`\`
          
          **Usage**: Download the RELEASE_HASHES.txt file and run \`sha256sum -c RELEASE_HASHES.txt\`
          
          ## 📋 Changelog
          
          $(head -n 100 CHANGELOG.md | tail -n +3)
          
          ---
          
          For development builds and latest changes, see the [development release](https://github.com/Gameaday/ia-get-cli/releases/tag/development).
          EOF

      - name: Update release with comprehensive notes
        shell: bash
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          gh release edit $TAG_NAME --notes-file FINAL_RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
